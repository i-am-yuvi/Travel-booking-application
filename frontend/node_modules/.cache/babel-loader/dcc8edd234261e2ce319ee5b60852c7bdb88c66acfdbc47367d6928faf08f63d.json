{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nvar JSON_CONTENT_TYPES = ['application/json', 'application/vnd.amadeus+json'];\n\n/**\n * The response object returned for every API call.\n *\n * @param {Object} http_response the response object returned from the Node/HTTP\n *  request\n * @param {Request} request the request object used to make this API call\n *\n * @property {number} statusCode the HTTP status code for the response, if any\n * @property {string} body the raw body received from the API\n * @property {Object} result the parsed JSON received from the API\n * @property {Object} data the data attribute taken from the result\n * @property {boolean} parsed wether the raw body has been parsed into JSON\n * @property {Request} request the request object used to make this API call\n *\n */\nvar Response = /*#__PURE__*/function () {\n  function Response(http_response, request) {\n    _classCallCheck(this, Response);\n    this.headers = http_response.headers || {};\n    this.statusCode = http_response.statusCode;\n    this.request = request;\n    this.body = '';\n    this.result = null;\n    this.data = null;\n    this.parsed = false;\n  }\n\n  // PROTECTED\n\n  /**\n   * Add a chunk received from the API to the body\n   *\n   * @param  {string} chunk a chunk of data\n   * @protected\n   */\n  _createClass(Response, [{\n    key: \"addChunk\",\n    value: function addChunk(chunk) {\n      this.body += chunk;\n    }\n\n    /**\n     * Tries to parse parse the raw data\n     * @protected\n     */\n  }, {\n    key: \"parse\",\n    value: function parse() {\n      try {\n        if (this.statusCode === 204) {\n          return;\n        }\n        if (this.isJson()) {\n          this.result = JSON.parse(this.body);\n          this.data = this.result.data;\n          this.parsed = true;\n        } else {\n          this.parsed = false;\n        }\n      } catch (SyntaxError) {\n        this.parsed = false;\n      }\n    }\n\n    /**\n     * Wether this API call can be considered a success. Used to wrap the response\n     * into a ResponseError\n     *\n     * @return {boolean}\n     * @protected\n     */\n  }, {\n    key: \"success\",\n    value: function success() {\n      if (this.statusCode == 204) {\n        return true;\n      }\n      if (this.parsed && this.statusCode < 300) {\n        return true;\n      }\n    }\n\n    // PRIVATE\n\n    /**\n     * Tests if the content is seemingly JSON\n     *\n     * @return {boolean}\n     * @private\n     */\n  }, {\n    key: \"isJson\",\n    value: function isJson() {\n      return JSON_CONTENT_TYPES.indexOf(this.headers['content-type']) !== -1;\n    }\n  }]);\n  return Response;\n}();\nvar _default = Response;\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["JSON_CONTENT_TYPES","Response","http_response","request","_classCallCheck","headers","statusCode","body","result","data","parsed","_createClass","key","value","addChunk","chunk","parse","isJson","JSON","SyntaxError","success","indexOf","_default","exports","module","default"],"sources":["/Users/yuvrajchhetri/Desktop/Travel-booking-napptive-hackathon/frontend/react-auth/node_modules/amadeus/src/amadeus/client/response.js"],"sourcesContent":["let JSON_CONTENT_TYPES = ['application/json', 'application/vnd.amadeus+json'];\n\n/**\n * The response object returned for every API call.\n *\n * @param {Object} http_response the response object returned from the Node/HTTP\n *  request\n * @param {Request} request the request object used to make this API call\n *\n * @property {number} statusCode the HTTP status code for the response, if any\n * @property {string} body the raw body received from the API\n * @property {Object} result the parsed JSON received from the API\n * @property {Object} data the data attribute taken from the result\n * @property {boolean} parsed wether the raw body has been parsed into JSON\n * @property {Request} request the request object used to make this API call\n *\n */\nclass Response {\n  constructor(http_response, request) {\n    this.headers = http_response.headers || {};\n    this.statusCode  = http_response.statusCode;\n    this.request     = request;\n    this.body        = '';\n    this.result      = null;\n    this.data        = null;\n    this.parsed      = false;\n  }\n\n  // PROTECTED\n\n  /**\n   * Add a chunk received from the API to the body\n   *\n   * @param  {string} chunk a chunk of data\n   * @protected\n   */\n  addChunk(chunk) {\n    this.body += chunk;\n  }\n\n\n  /**\n   * Tries to parse parse the raw data\n   * @protected\n   */\n  parse() {\n    try {\n      if (this.statusCode === 204) {\n        return;\n      }\n      if (this.isJson()) {\n        this.result = JSON.parse(this.body);\n        this.data = this.result.data;\n        this.parsed = true;\n      } else {\n        this.parsed = false;\n      }\n    } catch (SyntaxError) {\n      this.parsed = false;\n    }\n  }\n\n  /**\n   * Wether this API call can be considered a success. Used to wrap the response\n   * into a ResponseError\n   *\n   * @return {boolean}\n   * @protected\n   */\n  success() {\n    if (this.statusCode == 204) {\n      return true;\n    }\n    if (this.parsed && this.statusCode < 300) {\n      return true;\n    }\n  }\n\n  // PRIVATE\n\n\n  /**\n   * Tests if the content is seemingly JSON\n   *\n   * @return {boolean}\n   * @private\n   */\n  isJson() {\n    return (JSON_CONTENT_TYPES.indexOf(this.headers['content-type']) !== -1);\n  }\n}\n\nexport default Response;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,kBAAkB,GAAG,CAAC,kBAAkB,EAAE,8BAA8B,CAAC;;AAE7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA,IAeMC,QAAQ;EACZ,SAAAA,SAAYC,aAAa,EAAEC,OAAO,EAAE;IAAAC,eAAA,OAAAH,QAAA;IAClC,IAAI,CAACI,OAAO,GAAGH,aAAa,CAACG,OAAO,IAAI,CAAC,CAAC;IAC1C,IAAI,CAACC,UAAU,GAAIJ,aAAa,CAACI,UAAU;IAC3C,IAAI,CAACH,OAAO,GAAOA,OAAO;IAC1B,IAAI,CAACI,IAAI,GAAU,EAAE;IACrB,IAAI,CAACC,MAAM,GAAQ,IAAI;IACvB,IAAI,CAACC,IAAI,GAAU,IAAI;IACvB,IAAI,CAACC,MAAM,GAAQ,KAAK;EAC1B;;EAEA;;EAEA;AACF;AACA;AACA;AACA;AACA;EALEC,YAAA,CAAAV,QAAA;IAAAW,GAAA;IAAAC,KAAA,EAMA,SAAAC,SAASC,KAAK,EAAE;MACd,IAAI,CAACR,IAAI,IAAIQ,KAAK;IACpB;;IAGA;AACF;AACA;AACA;EAHE;IAAAH,GAAA;IAAAC,KAAA,EAIA,SAAAG,MAAA,EAAQ;MACN,IAAI;QACF,IAAI,IAAI,CAACV,UAAU,KAAK,GAAG,EAAE;UAC3B;QACF;QACA,IAAI,IAAI,CAACW,MAAM,EAAE,EAAE;UACjB,IAAI,CAACT,MAAM,GAAGU,IAAI,CAACF,KAAK,CAAC,IAAI,CAACT,IAAI,CAAC;UACnC,IAAI,CAACE,IAAI,GAAG,IAAI,CAACD,MAAM,CAACC,IAAI;UAC5B,IAAI,CAACC,MAAM,GAAG,IAAI;QACpB,CAAC,MAAM;UACL,IAAI,CAACA,MAAM,GAAG,KAAK;QACrB;MACF,CAAC,CAAC,OAAOS,WAAW,EAAE;QACpB,IAAI,CAACT,MAAM,GAAG,KAAK;MACrB;IACF;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;EANE;IAAAE,GAAA;IAAAC,KAAA,EAOA,SAAAO,QAAA,EAAU;MACR,IAAI,IAAI,CAACd,UAAU,IAAI,GAAG,EAAE;QAC1B,OAAO,IAAI;MACb;MACA,IAAI,IAAI,CAACI,MAAM,IAAI,IAAI,CAACJ,UAAU,GAAG,GAAG,EAAE;QACxC,OAAO,IAAI;MACb;IACF;;IAEA;;IAGA;AACF;AACA;AACA;AACA;AACA;EALE;IAAAM,GAAA;IAAAC,KAAA,EAMA,SAAAI,OAAA,EAAS;MACP,OAAQjB,kBAAkB,CAACqB,OAAO,CAAC,IAAI,CAAChB,OAAO,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,CAAC;IACzE;EAAC;EAAA,OAAAJ,QAAA;AAAA;AAAA,IAAAqB,QAAA,GAGYrB,QAAQ;AAAAsB,OAAA,cAAAD,QAAA;AAAAE,MAAA,CAAAD,OAAA,GAAAA,OAAA,CAAAE,OAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}