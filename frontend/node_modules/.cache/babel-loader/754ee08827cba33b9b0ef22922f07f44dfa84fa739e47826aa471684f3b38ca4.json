{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _response = _interopRequireDefault(require(\"./response\"));\nvar _util = _interopRequireDefault(require(\"util\"));\nvar _errors = require(\"./errors\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\n/**\n * Listen to changes in the HTTP request and build Response/ResponseError\n * objects accordingly.\n *\n * @param {Request} request the request object used to make the call\n * @param {EventEmitter} emitter a Node event emitter\n * @param {Client} client the client instance to log results to\n * @protected\n */\nvar Listener = /*#__PURE__*/function () {\n  function Listener(request, emitter, client) {\n    _classCallCheck(this, Listener);\n    this.request = request;\n    this.emitter = emitter;\n    this.client = client;\n  }\n\n  // PROTECTED\n\n  /**\n   * Listens to various events on the http_response object, listening for data,\n   * connections closing for bad reasons, and the end of the response.\n   *\n   * Used by the Client when making an API call.\n   *\n   * @param  {Object} http_response a Node http response object\n   * @protected\n   */\n  _createClass(Listener, [{\n    key: \"onResponse\",\n    value: function onResponse(http_response) {\n      var response = new _response[\"default\"](http_response, this.request);\n      http_response.on('data', response.addChunk.bind(response));\n      http_response.on('end', this.onEnd(response).bind(this));\n      http_response.on('close', this.onNetworkError(response).bind(this));\n      http_response.on('error', this.onNetworkError(response).bind(this));\n    }\n\n    /**\n     * Listens to a network error when making an API call.\n     *\n     * Used by the Client when making an API call.\n     *\n     * @param  {Object} http_response a Node http response object\n     * @protected\n     */\n  }, {\n    key: \"onError\",\n    value: function onError(http_response) {\n      var response = new _response[\"default\"](http_response, this.request);\n      this.onNetworkError(response)();\n    }\n\n    // PRIVATE\n\n    /**\n     * When the connection ends, check if the response can be parsed or not and\n     * act accordingly.\n     *\n     * @param  {Response} response\n     */\n  }, {\n    key: \"onEnd\",\n    value: function onEnd(response) {\n      var _this = this;\n      return function () {\n        response.parse();\n        if (response.success()) {\n          _this.onSuccess(response);\n        } else {\n          _this.onFail(response);\n        }\n      };\n    }\n\n    /**\n     * When the response was successful, resolve the promise and return the\n     * response object\n     *\n     * @param  {Response} response\n     */\n  }, {\n    key: \"onSuccess\",\n    value: function onSuccess(response) {\n      this.log(response);\n      this.emitter.emit('resolve', response);\n    }\n\n    /**\n     * When the connection was not successful, determine the reason and resolve\n     * the promise accordingly.\n     *\n     * @param  {Response} response\n     */\n  }, {\n    key: \"onFail\",\n    value: function onFail(response) {\n      var Error = this.errorFor(response);\n      var error = new Error(response);\n      this.log(response, error);\n      this.emitter.emit('reject', error);\n    }\n\n    /**\n     * Find the right error for the given response.\n     *\n     * @param {Response} reponse\n     * @returns {ResponseError}\n     */\n  }, {\n    key: \"errorFor\",\n    value: function errorFor(_ref) {\n      var statusCode = _ref.statusCode,\n        parsed = _ref.parsed;\n      var error = null;\n      if (statusCode >= 500) {\n        error = _errors.ServerError;\n      } else if (statusCode === 401) {\n        error = _errors.AuthenticationError;\n      } else if (statusCode === 404) {\n        error = _errors.NotFoundError;\n      } else if (statusCode >= 400) {\n        error = _errors.ClientError;\n      } else if (!parsed) {\n        error = _errors.ParserError;\n      } else {\n        error = _errors.UnknownError;\n      }\n      return error;\n    }\n\n    /**\n     * When the connection ran into a network error, reject the promise with a\n     * NetworkError.\n     *\n     * @param  {Response} response\n     */\n  }, {\n    key: \"onNetworkError\",\n    value: function onNetworkError(response) {\n      var _this2 = this;\n      return function () {\n        response.parse();\n        var error = new _errors.NetworkError(response);\n        _this2.log(response, error);\n        _this2.emitter.emit('reject', error);\n      };\n    }\n\n    /**\n     * Logs the response, when in debug mode\n     *\n     * @param  {Response} response the response object to log\n     * @private\n     */\n  }, {\n    key: \"log\",\n    value: function log(response, error) {\n      if (this.client.debug()) {\n        /* istanbul ignore next */\n        this.client.logger.log(_util[\"default\"].inspect(response, false, null));\n      }\n      if (!this.client.debug() && this.client.warn() && error) {\n        /* istanbul ignore next */\n        this.client.logger.log('Amadeus', error.code, error.description);\n      }\n    }\n  }]);\n  return Listener;\n}();\nvar _default = Listener;\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["_response","_interopRequireDefault","require","_util","_errors","obj","__esModule","_typeof","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","call","Number","Listener","request","emitter","client","value","onResponse","http_response","response","on","addChunk","bind","onEnd","onNetworkError","onError","_this","parse","success","onSuccess","onFail","log","emit","Error","errorFor","error","_ref","statusCode","parsed","ServerError","AuthenticationError","NotFoundError","ClientError","ParserError","UnknownError","_this2","NetworkError","debug","logger","inspect","warn","code","description","_default","exports","module","default"],"sources":["/Users/yuvrajchhetri/Desktop/Travel-booking-napptive-hackathon/frontend/react-auth/node_modules/amadeus/src/amadeus/client/listener.js"],"sourcesContent":["import Response from './response';\nimport util     from 'util';\n\nimport {\n  ServerError,\n  NotFoundError,\n  ClientError,\n  ParserError,\n  UnknownError,\n  NetworkError,\n  AuthenticationError\n} from './errors';\n\n\n/**\n * Listen to changes in the HTTP request and build Response/ResponseError\n * objects accordingly.\n *\n * @param {Request} request the request object used to make the call\n * @param {EventEmitter} emitter a Node event emitter\n * @param {Client} client the client instance to log results to\n * @protected\n */\nclass Listener {\n  constructor(request, emitter, client) {\n    this.request = request;\n    this.emitter = emitter;\n    this.client  = client;\n  }\n\n  // PROTECTED\n\n\n  /**\n   * Listens to various events on the http_response object, listening for data,\n   * connections closing for bad reasons, and the end of the response.\n   *\n   * Used by the Client when making an API call.\n   *\n   * @param  {Object} http_response a Node http response object\n   * @protected\n   */\n  onResponse(http_response) {\n    let response = new Response(http_response, this.request);\n\n    http_response.on('data',  response.addChunk.bind(response));\n    http_response.on('end',   this.onEnd(response).bind(this));\n    http_response.on('close', this.onNetworkError(response).bind(this));\n    http_response.on('error', this.onNetworkError(response).bind(this));\n  }\n\n  /**\n   * Listens to a network error when making an API call.\n   *\n   * Used by the Client when making an API call.\n   *\n   * @param  {Object} http_response a Node http response object\n   * @protected\n   */\n\n  onError(http_response) {\n    let response = new Response(http_response, this.request);\n    this.onNetworkError(response)();\n  }\n\n  // PRIVATE\n\n\n  /**\n   * When the connection ends, check if the response can be parsed or not and\n   * act accordingly.\n   *\n   * @param  {Response} response\n   */\n  onEnd(response) {\n    return () => {\n      response.parse();\n      if (response.success()) { this.onSuccess(response); }\n      else { this.onFail(response);  }\n    };\n  }\n\n  /**\n   * When the response was successful, resolve the promise and return the\n   * response object\n   *\n   * @param  {Response} response\n   */\n  onSuccess(response) {\n    this.log(response);\n    this.emitter.emit('resolve', response);\n  }\n\n  /**\n   * When the connection was not successful, determine the reason and resolve\n   * the promise accordingly.\n   *\n   * @param  {Response} response\n   */\n  onFail(response) {\n    let Error = this.errorFor(response);\n    let error = new Error(response);\n    this.log(response, error);\n    this.emitter.emit('reject', error);\n  }\n\n\n  /**\n   * Find the right error for the given response.\n   *\n   * @param {Response} reponse\n   * @returns {ResponseError}\n   */\n  errorFor({statusCode, parsed}) {\n    let error = null;\n    if (statusCode >= 500) { error = ServerError; }\n    else if (statusCode === 401) { error = AuthenticationError; }\n    else if (statusCode === 404) { error = NotFoundError; }\n    else if (statusCode >= 400) { error = ClientError; }\n    else if (!parsed) { error = ParserError; }\n    else { error = UnknownError; }\n    return error;\n  }\n\n  /**\n   * When the connection ran into a network error, reject the promise with a\n   * NetworkError.\n   *\n   * @param  {Response} response\n   */\n  onNetworkError(response) {\n    return () => {\n      response.parse();\n      let error = new NetworkError(response);\n      this.log(response, error);\n      this.emitter.emit('reject', error);\n    };\n  }\n\n  /**\n   * Logs the response, when in debug mode\n   *\n   * @param  {Response} response the response object to log\n   * @private\n   */\n  log(response, error) {\n    if (this.client.debug()) {\n      /* istanbul ignore next */\n      this.client.logger.log(util.inspect(response, false, null));\n    }\n    if (!this.client.debug() && this.client.warn() && error) {\n      /* istanbul ignore next */\n      this.client.logger.log('Amadeus', error.code, error.description);\n    }\n  }\n}\n\nexport default Listener;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}